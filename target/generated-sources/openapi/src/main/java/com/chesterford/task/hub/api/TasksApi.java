/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.chesterford.task.hub.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

import com.chesterford.task.hub.dto.TaskCreateRequestDto;import com.chesterford.task.hub.dto.TaskDto;import com.chesterford.task.hub.dto.TaskUpdateRequestDto;import java.util.UUID;

@Generated(value = "com.chesterford.FastSpringCodegen", date = "2025-06-26T21:18:37.398383+08:00[Asia/Kuala_Lumpur]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Tasks", description = "the Tasks API")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /tasks : Create a new task
     *
     * @param taskCreateRequestDto  (required)
     * @return Task created successfully (status code 201)
     */
    @Operation(
        operationId = "createTask",
        summary = "Create a new task",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskDto> createTask(
        @Parameter(name = "TaskCreateRequestDto", description = "", required = true) @Valid @RequestBody TaskCreateRequestDto taskCreateRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"assignedTo\" : \"assignedTo\", \"status\" : \"PENDING\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tasks/{taskId} : Delete a task
     *
     * @param taskId  (required)
     * @return Task deleted successfully (status code 204)
     *         or Task not found (status code 404)
     */
    @Operation(
        operationId = "deleteTaskById",
        summary = "Delete a task",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Task deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Task not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tasks/{taskId}"
    )
    
    default ResponseEntity<Void> deleteTaskById(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") UUID taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks/{taskId} : Get a task by ID
     *
     * @param taskId  (required)
     * @return Task found (status code 200)
     *         or Task not found (status code 404)
     */
    @Operation(
        operationId = "getTaskById",
        summary = "Get a task by ID",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{taskId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskDto> getTaskById(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") UUID taskId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"assignedTo\" : \"assignedTo\", \"status\" : \"PENDING\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks : Get all tasks
     *
     * @return List of tasks (status code 200)
     */
    @Operation(
        operationId = "getTasks",
        summary = "Get all tasks",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of tasks", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TaskDto>> getTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"assignedTo\" : \"assignedTo\", \"status\" : \"PENDING\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"assignedTo\" : \"assignedTo\", \"status\" : \"PENDING\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tasks/{taskId} : Update a task status
     *
     * @param taskId  (required)
     * @param taskUpdateRequestDto  (required)
     * @return Task updated successfully (status code 200)
     *         or Task not found (status code 404)
     */
    @Operation(
        operationId = "updateTaskById",
        summary = "Update a task status",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tasks/{taskId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskDto> updateTaskById(
        @Parameter(name = "taskId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("taskId") UUID taskId,
        @Parameter(name = "TaskUpdateRequestDto", description = "", required = true) @Valid @RequestBody TaskUpdateRequestDto taskUpdateRequestDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"title\", \"assignedTo\" : \"assignedTo\", \"status\" : \"PENDING\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
